# vim: set fenc=utf-8 ft=dosini:

# define a new task named "file-build"
[file-build]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command:c  =gcc "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" -Wall -g
command:cpp=g++ "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" -Wall -g
command:java=javac "$(VIM_FILEPATH)"
command:markdown=pandoc "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)".pdf
command:typescript=tsc "$(VIM_FILEPATH)"
command:python=mypy "$(VIM_FILEPATH)"
command:rust=rustc "$(VIM_FILEPATH)"
# lua compilation not actually needed?
# command:lua=luac "$(VIM_FILEPATH)" -o ""

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1

[project-build]
command=make
command:rust=cargo run
cwd=$(VIM_FILEDIR)
output=quickfix
save=1

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp,rust="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=python "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:typescript=ts-node "$(VIM_FILENAME)"
command:sh=./"$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:java=java "$(VIM_FILENOEXT)"
command:dart=dart "$(VIM_FILENAME)"
output=terminal
pos=floaterm
cwd=$(VIM_FILEDIR)
save=2
