#####################
### NATE'S .ZSHRC ###
#####################

# if tmux is executable, X is running, and not inside a tmux session, then try to attach.
# if attachment fails, start a new session
# https://wiki.archlinux.org/title/tmux#Start_tmux_on_every_shell_login
if [ -x "$(command -v tmux)" ] && [ -n "${DISPLAY}" ]; then
  [ -z "${TMUX}" ] && { tmux attach || tmux; } >/dev/null 2>&1
fi


# Profile startup time
zmodload zsh/zprof

#  INFO:
#   - This is Nate's custom .zshrc.
#   - It uses zinit as a plugin manager.
#   - Most of the stuff here has been yoinked from the internet.
#   - Never forget to leave notes and sources for stuff.

#  TODO:
#  - Seriously reorganize file
#  - Add marks for Vim

###########################
### ZINIT, DO NOT TOUCH ###
###########################

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk

###########
### ENV ###
###########

# Using neovim as preferred editor
export EDITOR="nvim.appimage"
export VISUAL="nvim.appimage"

export DISABLE_MAGIC_FUNCTIONS=true
export SERVER_IP="hostname -I"

export PATH="$PATH:$HOME/.local/bin:$HOME/bin"
export PATH="$PATH:$HOME/Applications"
export PATH="$PATH:/usr/local/go/bin"             # Go lang
export PATH="$PATH:$HOME/.cargo/bin"              # Rust

export SETUPTOOLS_USE_DISTUTILS=stdlib

typeset -A configs
configs=(
    'Neovim' "$HOME/.config/nvim/init.lua"
    'Zsh' "$HOME/.zshrc"
    'Kitty' "$HOME/.config/kitty/kitty.conf"
    'Tmux' "$HOME/.tmux.conf"
)

###########
### FZF ###
###########

export FZF_DEFAULT_OPTS="--preview '([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200'"

# FZF colorscheme
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS' --color=fg:#e64a9b,bg:#120307,hl:#2dba1a --color=fg+:#ff05a3,bg+:#120307,hl+:#00eaff --color=info:#eb6f6f,prompt:#ff006f,pointer:#8a1563 --color=marker:#87ff00,spinner:#af5fff,header:#d10404'

export FZF_DEFAULT_COMMAND="rg -L --files --no-ignore-vcs "

# Using highlight (http://www.andre-simon.de/doku/highlight/en/highlight.html)
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"

# Options to fzf command
export FZF_COMPLETION_OPTS='--border --info=inline'

###############
### ALIASES ###
###############

### Test for OS
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID_LIKE
fi

# Package Manager
if [[ ${OS} == "arch" ]]; then
    alias add="sudo pacman -S" # Pipes the yes answer to pacman
    alias update="sudo pacman -Syu"
else
    alias add="sudo apt install -y"
fi

# Utilities
alias ls="exa --icons --grid --header --git --group-directories-first"
alias lsl="exa --icons --grid --header --git -l"
alias lsm="exa --icons --grid --header --git --sort=modified -l"

alias ra=". ranger" # Ranger, but if you quit it CDs to dir
alias pdf="termpdf.py"
alias open="xdg-open"
# alias bat="batcat" # Needed if installed as an Ubuntu package

alias trash="trash-put"
alias trashl="trash-list"
alias trashr="trash-restore"
alias trashe="trash-empty"

# Git
alias ga="git add"
alias gp="git push"
alias gpo="git push origin"
alias gpom="git push origin main"
alias gpl="git pull"
alias gplo="git pull origin"
alias gb="git branch"
# alias gc="git commit -m"
alias gd="git diff"
alias gco="git checkout"
alias gclo="git clone"
alias gst="git status"
alias lg="lazygit"

# Python
alias py="python"
alias pyinst="python -m pip install"

# Neovim
alias neovim="nvim.appimage "
alias nvim="nvim.appimage "
alias nv="nvim.appimage "

# Stuff from Mac I guess?
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'

# FZF
alias fzfh="rg --files --hidden -g "!.git" | fzf"
alias vf='nvim.appimage $(fzf) '
alias -g Z='| fzf'
alias fzopen='xdg-open "$(fzf)"'

# Tmux
alias tmki="tmux kill-server"
alias tmat="tmux attach"

# Web development

# Starts a server to host and test a website at localhost
# others in network can also connect through IP
# Make sure to start in the server directory!
# https://dev.to/fidelve/using-vim-as-your-main-editor-for-web-development-5a73
alias serve="browser-sync start --server --files . --no-notify --host $SERVER_IP"

# nnn file manager stuff
alias n="nnn -e -x"

alias doom="~/.emacs.d/bin/doom"

# Misc stuff
alias pdfgrepquick="pdfgrep -n --ignore-case"
alias please='sudo $(fc -ln -1)'

### QUICK CONFIG EDITS
alias cfgnvim="$EDITOR ~/.config/nvim/init.lua"
alias cfgzsh="$EDITOR ~/.zshrc"


############
### OPTS ###
############

# Auto-correction of commands
# WARN: Very janky, not always right
# setopt correctall

# cd without having to type cd
setopt auto_cd

### The stuff below seems common in a lot of zsh configs.
### Maybe it's standard?
### Keep it as is

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Use modern completion system
# NOTE: Not needed because of autocomplete
# autoload -Uz compinit
# compinit

# Case insensitive cd
setopt nocaseglob

# https://github.com/nicknisi/dotfiles/blob/main/zsh/zshrc.symlink
setopt EXTENDED_HISTORY          # write the history file in the ":start:elapsed;command" format.
setopt HIST_REDUCE_BLANKS        # remove superfluous blanks before recording entry.
setopt SHARE_HISTORY             # share history between all sessions.
setopt HIST_IGNORE_ALL_DUPS      # delete old recorded entry if new entry is a duplicate.

##############
### ZSTYLE ###
##############

# Improve appearance of default completion style
# https://wiki.gentoo.org/wiki/Zsh/Guide
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

# Default stuff; don't touch
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate

# zstyle ':completion:*' format '%F{magenta}Completing:%f %d'
zstyle ':completion:*' format '%UCompleting %d%u'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

# FZF-Tab default config
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
# switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group ',' '.'

### Autocomplete
# https://github.com/marlonrichert/zsh-autocomplete/blob/main/.zshrc

zstyle ':autocomplete:*' widget-style menu-select
# complete-word: (Shift-)Tab inserts the top (bottom) completion.
# menu-complete: Press again to cycle to next (previous) completion.
# menu-select:   Same as `menu-complete`, but updates selection in menu.
# ⚠️ NOTE: This setting can NOT be changed at runtime.

zstyle ':autocomplete:*' fzf-completion yes
# no:  Tab uses Zsh's completion system only.
# yes: Tab first tries Fzf's completion, then falls back to Zsh's.
# ⚠️ NOTE: This setting can NOT be changed at runtime and requires that you
# have installed Fzf's shell extensions.

#################
### FUNCTIONS ###
#################

# gc - quick git commit with message
# (https://stackoverflow.com/questions/8006190/how-can-i-make-this-git-command-alias)
function gc () {
    git commit -m "$*"
}

# mkcdir - combines mkdir and cd
# Taken from https://unix.stackexchange.com/questions/125385/combined-mkdir-and-cd
mkcdir() {
    mkdir -p -- "$1" &&
      cd -P -- "$1"
}

# fzfd - cd to selected directory
fzfd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# Find hidden files with fzf
vfh() {
  local files

  files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})

  if [[ -n $files ]]
  then
     nvim -- $files
     print -l $files[1]
  fi
}

# fg-bg toggle via c-z
function fg-bg {
    if [[ $#BUFFER -eq 0 ]]; then
        BUFFER=fg
        zle accept-line
    else
        zle push-input
    fi
}
zle -N fg-bg
# bindkey '^z' fg-bg

# cfg - very simple custom script
# Takes an array list of configs to select in fzf
# then opens selected config in editor
# NOTE: Must have an associative array called "configs"
function cfg() {
    local selected=$(printf "%s\n" "${(@k)configs}" | fzf)

    if [ ! -n "${selected}" ]; then
        echo "Exiting..."
        return
    fi

    "$EDITOR" "${configs[$selected]}"
}

#################
### UTILITIES ###
#################

# Do exa after every cd
# NOTE: Not necessarily needed anymore because of autocomplete plugin
function list_all() {
  emulate -L zsh
  ls
}
if [[ ${chpwd_functions[(r)list_all]} != "list_all" ]];then
  chpwd_functions=(${chpwd_functions[@]} "list_all")
fi


########################
### STARTUP COMMANDS ###
########################

# NOTE: Must be placed before prompt
# Allows the prompt to always stay at the bottom
# print ${(pl:$LINES-16::\n:):-}

# Fetch command for fancy display
# if [ $COLUMNS -gt 73 ]
# then
#    fm6000 -c red -f ~/HDD/Github/Nate-Dotfiles/rose.txt
# fi

# Show list of tasks in Taskwarrior
# task list

# Start zoxide
eval "$(zoxide init zsh)"

################################
### OTHER INIT; DO NOT TOUCH ###
################################

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'


# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Generated for envman. Do not edit.
[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

###############
### PLUGINS ###
###############

### FZF Tab: Allows FZF tab completion anywhere
### WARN: Must always be first in plugin order
### WARN: Very buggy, prefer to not use
# NOTE: FIX FZF TAB WITH ZOXIDE
# https://github.com/Aloxaf/fzf-tab
# zinit light Aloxaf/fzf-tab

### FZF-ZSH
# zinit light unixorn/fzf-zsh-plugin

### Powerlevel10k: Custom prompt
# https://github.com/romkatv/powerlevel10k
zinit ice depth=1; zinit light romkatv/powerlevel10k

### Vim mode: Better than the built-in one
# https://github.com/jeffreytse/zsh-vi-mode
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode

### Zsh Autocomplete: Realtime autocompletion
### Better than Fzf tab for completion
# https://github.com/marlonrichert/zsh-autocomplete
zinit light marlonrichert/zsh-autocomplete

# Fast syntax highlighting: Shows syntax highlighting in commands
# https://github.com/zdharma-continuum/fast-syntax-highlighting
zinit light zdharma-continuum/fast-syntax-highlighting

zinit light zsh-users/zsh-completions


# NOTE: Probably not needed? I don't use it...
# https://github.com/redxtech/zsh-kitty
# zinit light redxtech/zsh-kitty

#  NOTE: Probably not needed?
# https://github.com/chrissicool/zsh-256color
# zinit light chrissicool/zsh-256color

# Colored man pages
# https://github.com/ael-code/zsh-colored-man-pages
zinit light ael-code/zsh-colored-man-pages

# FM: A file manager for any shell
# https://github.com/ddnexus/fm
zinit ice --depth'1' atinit'source fm.zsh' atclone'./fm__compile' atpull'%atclone'
zinit light ddnexus/fm

### Cd-reporoot
# https://github.com/P4Cu/cd-reporoot
zinit light P4Cu/cd-reporoot

### zsh expand: Expands aliases and abbreviations like fish
# https://github.com/MenkeTechnologies/zsh-expand
zinit ice lucid nocompile
zinit load MenkeTechnologies/zsh-expand

### fzf marks: Bookmark dirs and jump to them
# (https://github.com/urbainvaes/fzf-marks)
zinit load urbainvaes/fzf-marks

### Zsh edit: Better binds and line-editing tools
# (https://github.com/marlonrichert/zsh-edit)
zinit load marlonrichert/zsh-edit

###################
### PLUGINS END ###
###################

###############
### WIDGETS ###
###############

function _run_fzm() {
    fzm
}

#############
### BINDS ###
#############
# NOTE: Requires zsh vim plugin
# NOTE: Define widgets first above,
#       then bind those widgets to a command

function zvm_after_lazy_keybindings() {

  # Here we define the custom widget
  zvm_define_widget _run_fzm
  zvm_define_widget cfg

  # In normal mode, press Ctrl-E to invoke this widget
  zvm_bindkey vicmd '^E' _run_fzm
  zvm_bindkey viins '^G' _run_fzm
  zvm_bindkey vicmd '^C' cfg
}


##############################
### MISC. STUFF AT THE END ###
##############################

# Something to do with kitty autocomplete.
# Probably shouldn't touch, and should load this last.
# __kitty_complete

# The plugin will auto execute this zvm_after_init function
function zvm_after_init() {
  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
}
